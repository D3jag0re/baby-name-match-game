name: Build and Deploy Docker Image to Azure Web App

on:
  push:
    branches:
      - main  

jobs:
  build:
    runs-on: ubuntu-latest
    outputs: 
      resource_group_name: ${{ steps.outputs.outputs.RESOURCE_GROUP_NAME}}
      

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}   

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Retrieve Outputs
      id: outputs
      run: |
        storage_account_name=$(terraform output -raw storage_account_name)
        storage_container_name=$(terraform output -raw storage_account_container_name)
        app_service_name=$(terraform output -raw app_service_name)
        resource_group_name=$(terraform output -raw resource_group_name)
        app_service_plan=$(terraform output -raw app_service_plan)
        registry_login_server=$(terraform output -raw registry_login_server)

        echo "STORAGE_ACCOUNT_NAME=${storage_account_name}" >> $GITHUB_ENV
        echo "STORAGE_CONTAINER_NAME=${storage_container_name}" >> $GITHUB_ENV
        echo "APP_SERVICE_NAME=${app_service_name}" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=${resource_group_name}" >> $GITHUB_ENV
        echo "APP_SERVICE_PLAN=${app_service_plan}" >> $GITHUB_ENV
        echo "REGISTRY_LOGIN_SERVER=${registry_login_server}" >> $GITHUB_ENV
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  
    - name: Debug GITHUB_ENV
      run: |
        cat $GITHUB_ENV
  
    - name: Verify Environment Variables
      run: |
        echo "APP_SERVICE_NAME is $APP_SERVICE_NAME"
        echo "STORAGE_ACCOUNT_NAME is $STORAGE_ACCOUNT_NAME"
        echo "STORAGE_CONTAINER_NAME is $STORAGE_CONTAINER_NAME"
        echo "RESOURCE_GROUP_NAME is $RESOURCE_GROUP_NAME"
        echo "APP_SERVICE_PLAN is $APP_SERVICE_PLAN"
        echo "REGISTRY_LOGIN_SERVER is $REGISTRY_LOGIN_SERVER"    

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.ARM_CLIENT_ID }}
        password: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY_LOGIN_SERVER }}/flask-app:latest
      env:
        REGISTRY_LOGIN_SERVER: ${{ env.REGISTRY_LOGIN_SERVER }}

###############################################################################
###############################################################################

  #deploy:
  #  needs: build
  #  runs-on: ubuntu-latest

  #  steps:
  #  - name: Verify Environment Variables
  #    env:
  #      OUTPUT1: ${{ needs.build.outputs.resource_group_name }}
  #    run: |
  #      echo "$OUTPUT1"
        

  #  - name: Login to Azure
  #    uses: azure/login@v1
  #    with:
  #      creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'flask-app'
        images: ${{ env.REGISTRY_LOGIN_SERVER }}/flask-app:${{ github.sha }}
        slot-name: production
        resource-group-name: ${{ env.RESOURCE_GROUP_NAME }}
          
